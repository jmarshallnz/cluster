
R version 2.12.0 Patched (2010-11-07 r53537)
Copyright (C) 2010 The R Foundation for Statistical Computing
ISBN 3-900051-07-0
Platform: x86_64-unknown-linux-gnu (64-bit)

R is free software and comes with ABSOLUTELY NO WARRANTY.
You are welcome to redistribute it under certain conditions.
Type 'license()' or 'licence()' for distribution details.

R is a collaborative project with many contributors.
Type 'contributors()' for more information and
'citation()' on how to cite R or R packages in publications.

Type 'demo()' for some demos, 'help()' for on-line help, or
'help.start()' for an HTML browser interface to help.
Type 'q()' to quit R.

> library(cluster)
> 
> ## generate 1500 objects, divided into 2 clusters.
> if(R.version$major != "1" || as.numeric(R.version$minor) >= 7) RNGversion("1.6")
Warning message:
In RNGkind("Marsaglia-Multicarry", "Buggy Kinderman-Ramage") :
  Buggy version of Kinderman-Ramage generator used
> set.seed(264)
> x <- rbind(cbind(rnorm(700, 0,8), rnorm(700, 0,8)),
+            cbind(rnorm(800,50,8), rnorm(800,10,8)))
> 
> isEq <- function(x,y, epsF = 100)
+     is.logical(r <- all.equal(x,y, tol = epsF * .Machine$double.eps)) && r
> 
> .proctime00 <- proc.time()
> 
> ## full size sample {should be = pam()}:
> n0 <- length(iSml <- c(1:70, 701:720))
> summary(clara0 <- clara(x[iSml,], k = 2, sampsize = n0))
Object of class 'clara' from call:
 clara(x = x[iSml, ], k = 2, sampsize = n0) 
Medoids:
          [,1]       [,2]
[1,]  1.619094 -0.6697098
[2,] 51.460664 12.6328215
Objective function:	  9.351248 
Numerical information per cluster:
     size max_diss  av_diss isolation
[1,]   70 23.67426 9.295059 0.4589260
[2,]   20 19.81041 9.547913 0.3840251
Average silhouette width per cluster:
[1] 0.7419559 0.7295666
Average silhouette width of best sample: 0.7392027 

Best sample:
 [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25
[26] 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50
[51] 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75
[76] 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90
Clustering vector:
 [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
[39] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2 2 2 2
[77] 2 2 2 2 2 2 2 2 2 2 2 2 2 2

Silhouette plot information for best sample:
   cluster neighbor sil_width
40       1        2 0.8189217
70       1        2 0.8186973
66       1        2 0.8173129
39       1        2 0.8171253
6        1        2 0.8158260
9        1        2 0.8147047
12       1        2 0.8133175
26       1        2 0.8128297
56       1        2 0.8117376
7        1        2 0.8095740
33       1        2 0.8092035
60       1        2 0.8067630
62       1        2 0.8059430
21       1        2 0.8030279
41       1        2 0.8017783
16       1        2 0.8005143
27       1        2 0.7971827
59       1        2 0.7968887
8        1        2 0.7947941
17       1        2 0.7941256
38       1        2 0.7934237
32       1        2 0.7920043
63       1        2 0.7901349
52       1        2 0.7872858
46       1        2 0.7852065
47       1        2 0.7842709
65       1        2 0.7839258
4        1        2 0.7809115
23       1        2 0.7799612
19       1        2 0.7786651
42       1        2 0.7780707
20       1        2 0.7768930
37       1        2 0.7719716
11       1        2 0.7719447
22       1        2 0.7698024
30       1        2 0.7685122
68       1        2 0.7634484
1        1        2 0.7624047
58       1        2 0.7613915
50       1        2 0.7567549
25       1        2 0.7468130
31       1        2 0.7437604
2        1        2 0.7423751
15       1        2 0.7342193
69       1        2 0.7315055
36       1        2 0.7312177
48       1        2 0.7293586
14       1        2 0.7222345
3        1        2 0.7209803
44       1        2 0.7169812
34       1        2 0.7147437
64       1        2 0.7129325
54       1        2 0.7089811
49       1        2 0.7044900
43       1        2 0.6884306
29       1        2 0.6845792
10       1        2 0.6813561
51       1        2 0.6730410
13       1        2 0.6685180
55       1        2 0.6680502
5        1        2 0.6518400
35       1        2 0.6506280
24       1        2 0.6343832
18       1        2 0.6176214
61       1        2 0.6027746
57       1        2 0.5944097
45       1        2 0.5878055
53       1        2 0.5668748
28       1        2 0.5615843
67       1        2 0.5471711
82       2        1 0.8130494
84       2        1 0.8120131
90       2        1 0.8004220
73       2        1 0.7992194
78       2        1 0.7895616
76       2        1 0.7859463
89       2        1 0.7832719
88       2        1 0.7820209
83       2        1 0.7599199
80       2        1 0.7570550
87       2        1 0.7435898
71       2        1 0.7339466
75       2        1 0.7210982
81       2        1 0.7177946
72       2        1 0.7137692
86       2        1 0.7045675
79       2        1 0.7003733
85       2        1 0.6854539
74       2        1 0.4973579
77       2        1 0.4909004

4005 dissimilarities, summarized :
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
 0.37429 10.21900 18.31000 26.97500 46.50100 81.38000 
Metric :  euclidean 
Number of objects : 90

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
>           pam0 <- pam  (x[iSml,], k = 2)
> stopifnot(identical(clara0$clustering, pam0$clustering)
+         , isEq(clara0$objective, unname(pam0$objective[2]))
+           )
> 
> summary(clara2 <- clara(x, 2))
Object of class 'clara' from call:
 clara(x = x, k = 2) 
Medoids:
          [,1]       [,2]
[1,]  2.787896 0.06403649
[2,] 51.594304 8.52944737
Objective function:	  10.15876 
Numerical information per cluster:
     size max_diss   av_diss isolation
[1,]  700 32.70228 10.378867 0.6601837
[2,]  800 27.37593  9.966161 0.5526569
Average silhouette width per cluster:
[1] 0.752770 0.772374
Average silhouette width of best sample: 0.7652453 

Best sample:
 [1]   21   50   97  142  168  191  192  197  224  325  328  408  433  458  471
[16]  651  712  714  722  797  805  837  909  919  926  999 1006 1018 1019 1049
[31] 1081 1084 1132 1144 1150 1201 1207 1291 1307 1317 1330 1374 1426 1428
Clustering vector:
   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [408] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [445] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [482] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [519] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [556] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [593] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [630] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [667] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 2 2
 [704] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [741] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [778] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [815] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [852] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [889] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [926] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [963] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1000] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1037] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1074] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1111] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1148] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1185] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1222] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1259] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1296] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1333] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1370] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1407] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1444] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
[1481] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2

Silhouette plot information for best sample:
     cluster neighbor sil_width
458        1        2 0.8231660
142        1        2 0.8153602
21         1        2 0.8123992
197        1        2 0.8118223
408        1        2 0.8112843
97         1        2 0.8061654
433        1        2 0.7948877
191        1        2 0.7761169
50         1        2 0.7689566
651        1        2 0.7664647
192        1        2 0.7439787
325        1        2 0.7187212
471        1        2 0.7138665
168        1        2 0.6506124
224        1        2 0.6364204
328        1        2 0.5940982
919        2        1 0.8392739
1307       2        1 0.8360310
1081       2        1 0.8358883
1132       2        1 0.8313630
1207       2        1 0.8297462
712        2        1 0.8252963
1428       2        1 0.8194915
1150       2        1 0.8173306
1006       2        1 0.8163528
1144       2        1 0.8130290
1317       2        1 0.8128990
714        2        1 0.8127996
797        2        1 0.8103648
999        2        1 0.8090429
722        2        1 0.7873873
1019       2        1 0.7834898
1374       2        1 0.7830414
1426       2        1 0.7719712
1049       2        1 0.7695327
1201       2        1 0.7612259
1330       2        1 0.7542818
909        2        1 0.7342792
1291       2        1 0.7308119
837        2        1 0.6919267
1084       2        1 0.6774914
926        2        1 0.6713276
805        2        1 0.6304831
1018       2        1 0.5703118

946 dissimilarities, summarized :
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
 0.43881 11.27700 26.16100 32.88500 53.08100 94.22300 
Metric :  euclidean 
Number of objects : 44

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> 
> clInd <- c("objective", "i.med", "medoids", "clusinfo")
> clInS <- c(clInd, "sample")
> ## clara() {as original code} always draws the *same* random samples !!!!
> clara(x, 2, samples = 50)[clInd]
$objective
[1] 10.00144

$i.med
[1]  551 1232

$medoids
           [,1]      [,2]
[1,]  0.7558529 0.5295663
[2,] 49.4297134 9.5070656

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.73934 10.131630 0.6210615
[2,]  800 27.03542  9.887517 0.5462269

> 
> ## The for() code below hangs (in some 64-bit versions of R / clara / ...):
> ## try to do things stepwise:
> xx <- x[sample(nrow(x)),]
> if(FALSE) { ## only run manually
+     ff <- "/u/maechler/R/MM/Pkg-ex/cluster/clara2-ex.rda"
+     if(file.exists(ff))
+         load(ff)
+     else
+         save(xx, file=ff, compress=TRUE)
+ }
> print(clara(xx, 2, samples=50, trace = 3)[clInd])
calling .C(cl_clara, ..., DUP = FALSE):
C clara(): (nsam,nran,n) = (44,50,1500);
C clara(): sample 1  finding 1st... new k{ran}:
.. kall: FALSE, 
... nrx [0:1]= 0 0 
... nsel[0:0]= 23 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 23 54 87 103 140 199 246 303 306 322 394 408 412 414 428 461 468 521 592 647 859 898 906 967 971 1007 1028 1039 1114 1149 1151 1192 1237 1250 1279 1291 1301 1317 1340 1353 1366 1381 1383 1492  -> dysta2()
. clara(): s:= max dys[1..946] = 84.7454; bs2 1st proper or new best: obj= 10.112
C clara(): sample 2  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1151 1340 
... nsel[0:1]= 1151 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 21 50 97 142 168 191 192 197 224 325 328 433 458 471 651 712 714 722 797 805 837 909 919 926 999 1006 1018 1019 1049 1081 1084 1132 1144 1150 1151 1201 1207 1291 1307 1330 1340 1374 1426 1428  -> dysta2()
. clara(): s:= max dys[1..946] = 80.3603; bs2 obj= 10.112
C clara(): sample 3  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1151 1340 
... nsel[0:1]= 1151 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 10 15 23 46 85 90 94 105 112 225 278 313 485 486 502 513 529 639 641 660 681 757 796 812 814 865 876 896 954 959 973 1032 1045 1151 1249 1264 1269 1273 1296 1297 1336 1340 1361 1399  -> dysta2()
. clara(): s:= max dys[1..946] = 90.5529; bs2 obj= 10.4392
C clara(): sample 4  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1151 1340 
... nsel[0:1]= 1151 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 17 46 61 152 201 223 254 263 268 291 313 331 479 508 528 542 543 601 655 681 746 778 792 888 951 957 1010 1081 1085 1105 1110 1122 1136 1151 1231 1265 1272 1307 1340 1342 1365 1393 1395 1467  -> dysta2()
. clara(): s:= max dys[1..946] = 88.047; bs2 obj= 10.3256
C clara(): sample 5  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1151 1340 
... nsel[0:1]= 1151 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 7 38 134 140 282 283 311 329 363 461 496 539 572 585 631 655 665 695 758 792 820 823 912 919 962 1121 1140 1151 1166 1189 1192 1202 1204 1260 1297 1315 1321 1326 1340 1422 1431 1432 1463 1488  -> dysta2()
. clara(): s:= max dys[1..946] = 81.3492; bs2 obj= 10.5219
C clara(): sample 6  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1151 1340 
... nsel[0:1]= 1151 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 34 121 179 219 225 226 229 241 262 286 338 340 380 392 505 513 551 574 599 615 633 648 693 763 771 774 796 875 911 954 1035 1100 1128 1151 1178 1285 1333 1340 1364 1378 1385 1394 1448 1450  -> dysta2()
. clara(): s:= max dys[1..946] = 91.3227; bs2 obj= 10.1386
C clara(): sample 7  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1151 1340 
... nsel[0:1]= 1151 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 7 20 45 71 81 110 126 368 384 428 474 485 507 518 622 628 636 642 657 757 780 845 861 970 1002 1032 1081 1087 1127 1151 1195 1199 1281 1285 1300 1340 1343 1380 1421 1440 1446 1466 1479 1499  -> dysta2()
. clara(): s:= max dys[1..946] = 77.5603; bs2 obj= 10.112
C clara(): sample 8  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1151 1340 
... nsel[0:1]= 1151 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 19 36 59 103 130 156 191 193 201 315 326 397 405 425 497 527 553 557 559 562 623 629 661 687 699 819 905 1000 1026 1028 1033 1120 1148 1151 1170 1171 1202 1227 1235 1340 1361 1391 1430 1435  -> dysta2()
. clara(): s:= max dys[1..946] = 86.3698; bs2 obj= 10.4095
C clara(): sample 9  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1151 1340 
... nsel[0:1]= 1151 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 65 117 119 127 239 274 275 290 318 333 340 355 374 387 432 437 454 506 511 523 542 714 751 758 775 776 840 888 910 985 994 1002 1043 1063 1072 1093 1151 1202 1340 1464 1478 1481 1492 1497  -> dysta2()
. clara(): s:= max dys[1..946] = 89.6142; bs2 obj= 10.1507
C clara(): sample 10  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1151 1340 
... nsel[0:1]= 1151 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 22 35 93 122 196 224 257 270 367 435 451 482 488 491 542 559 560 584 600 615 707 709 737 756 771 820 830 874 884 909 974 996 1024 1039 1151 1179 1247 1269 1313 1338 1340 1491 1494 1500  -> dysta2()
. clara(): s:= max dys[1..946] = 86.2865; bs2 obj= 10.6473
C clara(): sample 11  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1151 1340 
... nsel[0:1]= 1151 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 18 25 44 49 109 144 150 217 237 299 302 511 512 540 591 619 644 680 682 725 739 814 883 909 910 923 942 986 1016 1020 1112 1118 1130 1140 1147 1151 1179 1190 1308 1340 1349 1417 1421 1440  -> dysta2()
. clara(): s:= max dys[1..946] = 84.9886; bs2 obj= 10.5167
C clara(): sample 12  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1151 1340 
... nsel[0:1]= 1151 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 30 52 92 94 106 122 126 171 179 250 349 407 447 454 566 568 579 607 621 764 801 804 811 828 862 864 927 991 1003 1012 1024 1103 1139 1151 1183 1204 1220 1241 1265 1340 1359 1406 1483 1491  -> dysta2()
. clara(): s:= max dys[1..946] = 87.2707; bs2 1st proper or new best: obj= 10.0289
C clara(): sample 13  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 1340 
... nsel[0:1]= 1139 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 71 106 108 194 207 236 248 258 274 310 323 338 340 449 458 480 511 514 560 597 656 703 760 763 779 851 865 871 885 918 925 978 1049 1104 1139 1316 1340 1355 1363 1424 1428 1464 1485 1496  -> dysta2()
. clara(): s:= max dys[1..946] = 81.0553; bs2 obj= 10.0833
C clara(): sample 14  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 1340 
... nsel[0:1]= 1139 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 6 38 41 89 101 108 149 158 164 248 264 287 297 331 383 385 478 507 544 554 599 625 648 649 654 681 782 785 869 890 928 1108 1139 1169 1171 1179 1254 1262 1340 1383 1456 1463 1475 1476  -> dysta2()
. clara(): s:= max dys[1..946] = 75.3679; bs2 obj= 10.1145
C clara(): sample 15  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 1340 
... nsel[0:1]= 1139 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 2 206 221 226 230 254 293 318 356 467 472 480 503 542 547 551 562 569 682 735 770 915 942 943 959 987 1096 1098 1117 1139 1214 1253 1269 1271 1294 1333 1340 1353 1366 1376 1411 1416 1430 1489  -> dysta2()
. clara(): s:= max dys[1..946] = 95.135; bs2 obj= 10.0825
C clara(): sample 16  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 1340 
... nsel[0:1]= 1139 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 38 42 63 67 79 93 188 222 229 253 299 322 350 352 424 474 503 518 658 680 711 720 725 748 771 788 936 965 970 985 999 1000 1058 1112 1138 1139 1203 1235 1249 1322 1340 1345 1414 1467  -> dysta2()
. clara(): s:= max dys[1..946] = 80.0027; bs2 obj= 10.6769
C clara(): sample 17  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 1340 
... nsel[0:1]= 1139 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 78 97 123 146 149 159 161 217 254 264 272 278 379 388 389 420 445 464 495 591 597 609 739 768 786 820 919 953 996 1042 1088 1112 1122 1139 1152 1215 1249 1277 1280 1340 1369 1376 1408 1419  -> dysta2()
. clara(): s:= max dys[1..946] = 88.7679; bs2 obj= 10.4843
C clara(): sample 18  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 1340 
... nsel[0:1]= 1139 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 57 85 135 242 283 290 321 335 342 351 405 407 491 578 636 676 682 683 698 719 741 744 795 797 837 849 962 970 1008 1029 1031 1056 1072 1090 1105 1139 1150 1220 1228 1231 1332 1340 1368 1411  -> dysta2()
. clara(): s:= max dys[1..946] = 79.4459; bs2 obj= 10.0289
C clara(): sample 19  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 1340 
... nsel[0:1]= 1139 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 38 44 84 152 156 238 242 257 337 397 403 423 436 456 464 477 502 528 538 567 583 686 825 841 885 931 942 964 975 1079 1085 1093 1099 1114 1139 1214 1253 1302 1318 1340 1427 1459 1489 1492  -> dysta2()
. clara(): s:= max dys[1..946] = 88.5909; bs2 obj= 10.039
C clara(): sample 20  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 1340 
... nsel[0:1]= 1139 1340 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 77 127 128 159 184 192 300 318 348 378 387 392 476 493 516 560 587 613 648 650 658 772 783 854 862 882 954 984 1010 1014 1020 1080 1086 1118 1139 1156 1237 1276 1340 1362 1457 1483 1485 1490  -> dysta2()
. clara(): s:= max dys[1..946] = 71.754; bs2 1st proper or new best: obj= 10.0219
C clara(): sample 21  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 493 300 
... nsel[0:1]= 300 493 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 20 29 105 159 300 421 435 438 449 454 493 522 575 576 584 696 731 732 748 772 775 790 797 812 844 889 894 911 963 968 980 999 1016 1144 1171 1208 1215 1233 1297 1345 1442 1451 1459 1500  -> dysta2()
. clara(): s:= max dys[1..946] = 86.3879; bs2 obj= 10.0219
C clara(): sample 22  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 493 300 
... nsel[0:1]= 300 493 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 50 136 204 270 295 300 448 451 457 479 493 550 579 653 714 727 824 831 892 908 939 945 948 999 1016 1017 1041 1057 1072 1166 1194 1214 1228 1232 1277 1287 1331 1341 1366 1367 1431 1453 1481 1496  -> dysta2()
. clara(): s:= max dys[1..946] = 86.2377; bs2 obj= 10.0219
C clara(): sample 23  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 493 300 
... nsel[0:1]= 300 493 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 69 75 87 97 104 136 147 226 265 300 306 374 378 397 475 482 492 493 501 506 601 607 674 681 694 759 968 1049 1076 1101 1137 1139 1164 1182 1196 1271 1340 1366 1367 1380 1399 1443 1473 1478  -> dysta2()
. clara(): s:= max dys[1..946] = 89.2695; bs2 obj= 10.1029
C clara(): sample 24  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 493 300 
... nsel[0:1]= 300 493 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 60 96 140 161 177 198 222 300 316 363 440 448 493 509 549 551 564 566 579 584 628 636 707 756 807 904 911 969 997 1023 1025 1036 1064 1078 1221 1258 1261 1268 1285 1319 1384 1448 1460 1469  -> dysta2()
. clara(): s:= max dys[1..946] = 84.5963; bs2 obj= 10.2899
C clara(): sample 25  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 493 300 
... nsel[0:1]= 300 493 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 6 61 273 300 312 320 381 385 442 453 487 493 563 565 651 664 693 705 731 780 795 797 864 906 915 937 968 971 1017 1054 1113 1160 1217 1220 1236 1308 1321 1322 1328 1342 1375 1382 1435 1481  -> dysta2()
. clara(): s:= max dys[1..946] = 75.1447; bs2 obj= 10.1338
C clara(): sample 26  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 493 300 
... nsel[0:1]= 300 493 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 65 126 128 136 211 219 300 340 413 420 421 432 433 463 493 498 528 546 558 565 606 615 621 715 722 744 754 767 788 840 842 935 964 1001 1011 1082 1105 1106 1138 1239 1242 1326 1347 1385  -> dysta2()
. clara(): s:= max dys[1..946] = 83.1922; bs2 obj= 10.2005
C clara(): sample 27  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 493 300 
... nsel[0:1]= 300 493 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 53 55 74 171 210 251 290 300 323 333 368 373 387 446 459 493 495 663 683 687 705 711 750 775 813 924 929 938 961 999 1004 1008 1019 1026 1056 1111 1139 1192 1227 1372 1399 1400 1416 1444  -> dysta2()
. clara(): s:= max dys[1..946] = 74.5042; bs2 1st proper or new best: obj= 10.0032
C clara(): sample 28  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 15 69 95 160 192 206 226 228 279 300 302 310 371 424 495 499 520 524 536 550 645 678 679 686 710 756 779 807 809 960 975 1115 1137 1139 1168 1177 1182 1228 1245 1422 1427 1442 1456 1457  -> dysta2()
. clara(): s:= max dys[1..946] = 73.3263; bs2 obj= 10.0843
C clara(): sample 29  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 79 109 160 206 237 300 326 333 365 376 535 554 580 603 606 616 618 674 711 721 729 735 836 845 846 877 881 903 921 931 952 1048 1054 1066 1139 1196 1205 1243 1277 1376 1393 1411 1453 1499  -> dysta2()
. clara(): s:= max dys[1..946] = 85.8911; bs2 obj= 10.2104
C clara(): sample 30  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 13 29 45 47 62 69 107 172 177 185 188 234 289 300 325 368 514 542 592 699 740 747 778 808 862 864 948 1035 1133 1139 1140 1155 1176 1198 1201 1225 1252 1254 1294 1306 1419 1427 1486 1488  -> dysta2()
. clara(): s:= max dys[1..946] = 77.34; bs2 obj= 10.0032
C clara(): sample 31  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 36 42 56 71 171 210 259 275 300 384 416 447 449 495 501 541 609 613 695 699 714 792 794 799 854 860 880 893 913 921 934 959 985 1024 1040 1093 1139 1143 1282 1298 1342 1388 1432 1465  -> dysta2()
. clara(): s:= max dys[1..946] = 79.2961; bs2 obj= 10.1346
C clara(): sample 32  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 37 43 50 75 113 194 233 300 319 414 440 442 447 584 585 616 641 649 757 775 805 835 849 950 973 995 1017 1044 1070 1105 1107 1115 1139 1229 1240 1311 1319 1399 1411 1421 1441 1467 1471 1477  -> dysta2()
. clara(): s:= max dys[1..946] = 82.0621; bs2 obj= 10.0079
C clara(): sample 33  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 101 128 165 190 254 300 302 399 408 416 477 486 534 562 616 844 878 892 895 911 933 979 1032 1033 1041 1139 1153 1188 1189 1229 1232 1247 1254 1269 1301 1339 1346 1352 1368 1411 1420 1425 1456 1474  -> dysta2()
. clara(): s:= max dys[1..946] = 76.1357; bs2 obj= 10.0152
C clara(): sample 34  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 14 29 123 151 171 172 185 189 234 244 288 298 300 323 324 388 438 454 457 507 593 661 727 752 905 906 908 936 1007 1139 1171 1184 1205 1281 1288 1350 1365 1396 1403 1405 1437 1456 1473 1474  -> dysta2()
. clara(): s:= max dys[1..946] = 76.2002; bs2 obj= 10.0032
C clara(): sample 35  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 6 33 58 96 121 139 153 228 300 323 324 337 356 400 410 430 526 532 544 554 561 593 604 683 722 763 831 835 854 914 932 939 949 963 1036 1058 1064 1110 1131 1138 1139 1216 1425 1498  -> dysta2()
. clara(): s:= max dys[1..946] = 83.2469; bs2 obj= 10.1734
C clara(): sample 36  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 21 35 94 178 215 218 242 276 297 300 341 406 417 435 517 553 597 618 634 655 679 773 820 897 905 958 966 1006 1008 1023 1041 1085 1093 1139 1151 1164 1213 1264 1361 1426 1454 1480 1482 1493  -> dysta2()
. clara(): s:= max dys[1..946] = 91.5556; bs2 obj= 10.0032
C clara(): sample 37  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 11 70 117 174 177 193 225 265 278 285 299 300 332 339 426 438 463 518 730 769 777 842 910 944 1020 1021 1022 1036 1108 1121 1139 1150 1162 1188 1252 1254 1321 1363 1369 1372 1394 1425 1428 1474  -> dysta2()
. clara(): s:= max dys[1..946] = 77.8577; bs2 obj= 10.5208
C clara(): sample 38  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 39 62 63 95 196 199 279 284 300 304 392 522 585 669 676 797 838 870 877 878 889 899 920 955 985 1003 1015 1022 1063 1078 1139 1150 1172 1179 1201 1211 1224 1237 1245 1297 1392 1421 1458 1468  -> dysta2()
. clara(): s:= max dys[1..946] = 79.4464; bs2 obj= 10.0032
C clara(): sample 39  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 13 68 96 149 185 300 329 342 356 357 373 510 512 531 583 593 628 667 708 747 780 790 825 844 890 903 952 1072 1121 1139 1140 1144 1162 1168 1207 1232 1270 1299 1386 1395 1418 1456 1461 1476  -> dysta2()
. clara(): s:= max dys[1..946] = 81.7464; bs2 obj= 10.7806
C clara(): sample 40  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 72 94 125 134 139 185 300 379 384 399 401 413 414 472 526 552 617 649 663 683 685 736 759 767 828 830 916 952 956 981 993 1007 1135 1136 1139 1167 1213 1236 1266 1381 1417 1432 1465 1483  -> dysta2()
. clara(): s:= max dys[1..946] = 81.4514; bs2 obj= 10.4477
C clara(): sample 41  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 5 11 23 154 162 200 202 234 300 350 368 410 536 566 617 694 783 790 822 833 881 977 992 1011 1037 1060 1064 1075 1102 1131 1139 1143 1168 1178 1192 1264 1293 1302 1303 1334 1338 1360 1378 1389  -> dysta2()
. clara(): s:= max dys[1..946] = 73.4388; bs2 obj= 10.1185
C clara(): sample 42  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 90 96 112 133 155 158 182 209 211 263 300 333 376 384 443 445 456 470 486 502 504 519 526 564 629 634 642 645 663 691 782 825 972 999 1049 1073 1139 1156 1186 1197 1235 1321 1409 1492  -> dysta2()
. clara(): s:= max dys[1..946] = 96.0745; bs2 obj= 10.0287
C clara(): sample 43  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 50 97 100 239 251 255 299 300 345 389 422 493 499 513 528 667 732 746 873 904 906 952 958 998 1139 1152 1156 1171 1204 1249 1251 1256 1265 1311 1317 1319 1337 1350 1391 1405 1416 1442 1481 1497  -> dysta2()
. clara(): s:= max dys[1..946] = 80.9596; bs2 obj= 10.0292
C clara(): sample 44  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 1 64 186 197 268 276 300 356 368 378 424 428 434 494 500 507 532 628 651 690 716 776 841 871 897 900 904 1042 1066 1070 1074 1098 1106 1139 1214 1232 1262 1292 1306 1370 1379 1407 1452 1474  -> dysta2()
. clara(): s:= max dys[1..946] = 91.5542; bs2 obj= 10.6533
C clara(): sample 45  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 27 62 72 145 146 186 189 204 226 258 296 300 303 368 377 382 398 413 431 558 570 585 622 647 711 760 856 865 873 934 991 1019 1041 1073 1139 1301 1335 1349 1352 1368 1390 1430 1436 1498  -> dysta2()
. clara(): s:= max dys[1..946] = 82.7184; bs2 obj= 10.0595
C clara(): sample 46  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 110 128 141 162 211 238 245 300 307 309 322 325 353 362 394 413 431 486 608 628 629 642 646 691 701 745 780 781 845 895 911 914 943 964 1050 1139 1209 1362 1363 1365 1393 1464 1489 1490  -> dysta2()
. clara(): s:= max dys[1..946] = 78.0171; bs2 obj= 10.256
C clara(): sample 47  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 15 21 67 88 95 173 300 360 382 430 455 463 471 490 515 553 578 580 596 610 755 781 813 857 867 983 1001 1011 1018 1051 1061 1118 1139 1140 1179 1185 1288 1292 1372 1389 1396 1406 1420 1493  -> dysta2()
. clara(): s:= max dys[1..946] = 78.0975; bs2 obj= 10.0032
C clara(): sample 48  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 50 108 121 170 300 318 383 411 437 450 492 551 635 672 675 685 699 733 755 780 794 863 874 887 892 989 1010 1054 1075 1091 1112 1136 1139 1220 1277 1311 1354 1362 1415 1423 1463 1465 1481 1498  -> dysta2()
. clara(): s:= max dys[1..946] = 88.4769; bs2 obj= 10.6891
C clara(): sample 49  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 42 65 78 145 209 221 278 300 326 329 351 382 385 431 439 468 478 527 574 635 650 682 722 735 742 789 796 798 883 895 920 974 975 1139 1187 1226 1230 1234 1367 1401 1477 1478 1479 1493  -> dysta2()
. clara(): s:= max dys[1..946] = 75.9709; bs2 obj= 10.9521
C clara(): sample 50  if (kall && nunfs...): 
.. kall: T, 
... nrx [0:1]= 1139 300 
... nsel[0:1]= 300 1139 
 {295} [ntt=44, nunfs=0] .. nsel[1:44]= 20 35 107 119 129 136 168 181 194 202 211 254 300 320 349 378 415 425 496 520 552 631 653 656 736 741 756 761 849 979 1042 1126 1133 1139 1254 1295 1299 1335 1346 1356 1412 1442 1460 1472  -> dysta2()
. clara(): s:= max dys[1..946] = 86.3129; bs2 obj= 10.4592
C clara(): best sample _found_ ; nbest[1:44] =
 c(53,55,74,171,210,251,290,300,323,333,368,373,387,446,459,493,495,663,683,687,705,711,750,775,813,924,929,938,961,999,1004,1008,1019,1026,1056,1111,1139,1192,1227,1372,1399,1400,1416,1444)
 --> dysta2(nbest), resul(), end
$objective
[1] 10.00323

$i.med
[1] 1139  300

$medoids
           [,1]       [,2]
[1,] 49.6543096 10.8671126
[2,]  0.7558529  0.5295663

$clusinfo
     size max_diss  av_diss isolation
[1,]  800 28.41036  9.89087 0.5684433
[2,]  700 30.73934 10.13163 0.6150423

> ##                             ^^^^^^^^^ lots of output before hanging
> ## for sample 45
> ## From that output I gather the sample indices nsel[] and all k{ran} are
> ii <- c(194, 1411,
+         1430,398,570,72,27,62,1301,368,1390,991,296,431,1019,186,558,258,413,
+         647,585,1352,1073,873,377,711,1498,865,1436,1335,189,622,760,226,146,
+         145,1349,382,1368,934,204,303,856,1489)
> ## Trying
> pp <- pam(x[ii,], k =2) # gives no problem
> 
> for(i in 1:19)
+     print(clara(x[sample(nrow(x)),], 2, samples = 50)[clInd])
$objective
[1] 9.998856

$i.med
[1]  977 1459

$medoids
           [,1]     [,2]
[1,] 51.0033452 9.128410
[2,]  0.7469202 1.249320

$clusinfo
     size max_diss  av_diss isolation
[1,]  800 26.86019  9.87836 0.5280131
[2,]  700 30.34337 10.13657 0.5964848

$objective
[1] 10.01977

$i.med
[1]  739 1385

$medoids
           [,1]      [,2]
[1,]  0.7558529 0.5295663
[2,] 50.8770815 8.5643877

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.73934 10.131630 0.6055681
[2,]  800 26.74444  9.921884 0.5268682

$objective
[1] 10.00144

$i.med
[1]  862 1010

$medoids
           [,1]      [,2]
[1,]  0.7558529 0.5295663
[2,] 49.4297134 9.5070656

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.73934 10.131630 0.6210615
[2,]  800 27.03542  9.887517 0.5462269

$objective
[1] 10.01561

$i.med
[1] 603 820

$medoids
           [,1]      [,2]
[1,] 49.6543096 10.867113
[2,]  0.7824195  1.649143

$clusinfo
     size max_diss  av_diss isolation
[1,]  800 28.41036  9.89087 0.5712506
[2,]  700 30.16311 10.15816 0.6064933

$objective
[1] 10.01514

$i.med
[1]   44 1430

$medoids
           [,1]       [,2]
[1,] 49.6543096 10.8671126
[2,]  0.6604674 -0.1066458

$clusinfo
     size max_diss  av_diss isolation
[1,]  800 28.41036  9.89087 0.5658558
[2,]  700 31.01367 10.15717 0.6177065

$objective
[1] 10.00107

$i.med
[1]  904 1214

$medoids
           [,1]      [,2]
[1,] 50.2492576 10.299201
[2,] -0.8155063  1.417238

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 27.91319  9.844468 0.5385377
[2,]  700 28.93873 10.180037 0.5583237

$objective
[1] 10.00573

$i.med
[1] 379 647

$medoids
           [,1]      [,2]
[1,]  0.7558529 0.5295663
[2,] 49.6232996 9.1032208

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.73934 10.131630 0.6195718
[2,]  800 26.78803  9.895565 0.5399304

$objective
[1] 10.03059

$i.med
[1] 805 887

$medoids
            [,1]     [,2]
[1,] -0.07369905 2.028452
[2,] 49.38189025 9.446208

$clusinfo
     size max_diss  av_diss isolation
[1,]  700 29.23504 10.18670 0.5845981
[2,]  800 27.07402  9.89399 0.5413853

$objective
[1] 10.0203

$i.med
[1] 407 333

$medoids
           [,1]      [,2]
[1,]  0.7824195  1.649143
[2,] 51.1016598 11.021770

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.16311 10.158161 0.5892994
[2,]  800 28.74613  9.899672 0.5616159

$objective
[1] 10.01382

$i.med
[1]  642 1153

$medoids
           [,1]     [,2]
[1,]  0.7824195 1.649143
[2,] 49.4297134 9.507066

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.16311 10.158161 0.6121028
[2,]  800 27.03542  9.887517 0.5486324

$objective
[1] 9.990858

$i.med
[1] 270 384

$medoids
           [,1]      [,2]
[1,] 50.2492576 10.299201
[2,]  0.7824195  1.649143

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 27.91319  9.844468 0.5558465
[2,]  700 30.16311 10.158161 0.6006500

$objective
[1] 9.990858

$i.med
[1] 1453  272

$medoids
           [,1]      [,2]
[1,] 50.2492576 10.299201
[2,]  0.7824195  1.649143

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 27.91319  9.844468 0.5558465
[2,]  700 30.16311 10.158161 0.6006500

$objective
[1] 9.996497

$i.med
[1] 263 368

$medoids
           [,1]      [,2]
[1,]  0.9255294  1.737013
[2,] 50.2492576 10.299201

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.23980 10.170244 0.6040545
[2,]  800 27.91319  9.844468 0.5575794

$objective
[1] 10.00415

$i.med
[1] 1139 1405

$medoids
          [,1]       [,2]
[1,] 50.249258 10.2992014
[2,]  1.581224  0.4703763

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 27.91319  9.844468 0.5621923
[2,]  700 31.46479 10.186640 0.6337242

$objective
[1] 10.02048

$i.med
[1]  560 1486

$medoids
           [,1]     [,2]
[1,]  0.7469202 1.249320
[2,] 49.2342914 9.236618

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.34337 10.136565 0.6174776
[2,]  800 27.19128  9.918899 0.5533336

$objective
[1] 9.978477

$i.med
[1] 756 367

$medoids
           [,1]       [,2]
[1,]  0.7558529  0.5295663
[2,] 50.2492576 10.2992014

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.73934 10.131630 0.6093223
[2,]  800 27.91319  9.844468 0.5533016

$objective
[1] 10.00415

$i.med
[1] 1148  156

$medoids
          [,1]       [,2]
[1,] 50.249258 10.2992014
[2,]  1.581224  0.4703763

$clusinfo
     size max_diss   av_diss isolation
[1,]  800 27.91319  9.844468 0.5621923
[2,]  700 31.46479 10.186640 0.6337242

$objective
[1] 10.03766

$i.med
[1] 1204  272

$medoids
            [,1]     [,2]
[1,] -0.07369905 2.028452
[2,] 49.98807148 8.743293

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 29.23504 10.186699 0.5787959
[2,]  800 26.38109  9.907246 0.5222934

$objective
[1] 9.978477

$i.med
[1] 778 485

$medoids
           [,1]       [,2]
[1,]  0.7558529  0.5295663
[2,] 50.2492576 10.2992014

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.73934 10.131630 0.6093223
[2,]  800 27.91319  9.844468 0.5533016

> 
> clara(x, 2, samples = 101)[clInd]
$objective
[1] 10.00144

$i.med
[1]  551 1232

$medoids
           [,1]      [,2]
[1,]  0.7558529 0.5295663
[2,] 49.4297134 9.5070656

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.73934 10.131630 0.6210615
[2,]  800 27.03542  9.887517 0.5462269

> clara(x, 2, samples = 149)[clInd]
$objective
[1] 9.978477

$i.med
[1]  551 1079

$medoids
           [,1]       [,2]
[1,]  0.7558529  0.5295663
[2,] 50.2492576 10.2992014

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.73934 10.131630 0.6093223
[2,]  800 27.91319  9.844468 0.5533016

> clara(x, 2, samples = 200)[clInd]
$objective
[1] 9.978477

$i.med
[1]  551 1079

$medoids
           [,1]       [,2]
[1,]  0.7558529  0.5295663
[2,] 50.2492576 10.2992014

$clusinfo
     size max_diss   av_diss isolation
[1,]  700 30.73934 10.131630 0.6093223
[2,]  800 27.91319  9.844468 0.5533016

> ## Note that this last one is practically identical to the slower  pam() one
> 
> x[print(sample(length(x), 20))] <- NA
 [1] 1079  826  357 1917   75 1463 2539 1988  767 1715  772 1407 2391 1574  466
[16]  646 2771  523  861 1725
> clara(x, 2, samples = 50)[clInd]
$objective
[1] 7.261091

$i.med
[1]  551 1039

$medoids
           [,1]      [,2]
[1,]  0.7558529 0.5295663
[2,] 46.8740873        NA

$clusinfo
     size max_diss  av_diss isolation
[1,]  669 30.73934 9.978089 0.4713103
[2,]  831 25.03604 4.858118 0.3838646

> 
> ###-- Larger example: 2000 objects, divided into 5 clusters.
> x5 <- rbind(cbind(rnorm(400, 0,4), rnorm(400, 0,4)),
+             cbind(rnorm(400,10,8), rnorm(400,40,6)),
+             cbind(rnorm(400,30,4), rnorm(400, 0,4)),
+             cbind(rnorm(400,40,4), rnorm(400,20,2)),
+             cbind(rnorm(400,50,4), rnorm(400,50,4)))
> ## plus 1 random dimension
> x5 <- cbind(x5, rnorm(nrow(x5)))
> 
> clara(x5, 5)
Call:	 clara(x = x5, k = 5) 
Medoids:
          [,1]       [,2]      [,3]
[1,] -1.441508 -0.2898531 0.7516499
[2,] 11.485958 41.8857869 0.7429690
[3,] 41.320516 20.2857507 0.3629901
[4,] 50.642369 48.5485423 0.9250403
[5,] 32.404065  1.1300862 0.7976362
Objective function:	 5.97835
Clustering vector: 	 int [1:2000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
Cluster sizes:	    	 400 394 404 402 400 
Best sample:
 [1]   20   31   66  130  189  255  256  262  298  370  418  437  577  611  628
[16]  647  669  789  868  950  952  963 1073 1115 1198 1211 1225 1235 1297 1331
[31] 1342 1357 1358 1371 1398 1441 1509 1534 1601 1609 1721 1729 1743 1774 1815
[46] 1832 1843 1865 1902 1903

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> summary(clara(x5, 5, samples = 50))
Object of class 'clara' from call:
 clara(x = x5, k = 5, samples = 50) 
Medoids:
             [,1]       [,2]        [,3]
[1,]  0.009898956 -1.3995599  0.75311855
[2,]  8.589591773 38.1123175  0.50615564
[3,] 41.128364368 20.9384581 -0.61203968
[4,] 50.399157327 49.7273723 -0.02458452
[5,] 30.555250565 -0.6932155 -0.42527702
Objective function:	  5.794641 
Numerical information per cluster:
     size max_diss  av_diss isolation
[1,]  400 14.80168 5.295404 0.4840910
[2,]  391 26.65813 9.153210 0.7242123
[3,]  404 18.41105 4.009631 0.7646387
[4,]  405 21.78758 5.541303 0.7202381
[5,]  400 14.74078 5.070244 0.6122070
Average silhouette width per cluster:
[1] 0.7982753 0.6584968 0.7980377 0.8500952 0.6332051
Average silhouette width of best sample: 0.7206308 

Best sample:
 [1]   87  171  255  282  291  453  507  513  550  560  561  576  589  606  617
[16]  664  704  728  744  753  808  827  924  940  954  962  992 1005 1022 1040
[31] 1051 1060 1120 1207 1247 1285 1334 1348 1371 1443 1474 1475 1517 1651 1656
[46] 1762 1768 1770 1795 1913
Clustering vector:
   [1] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
  [38] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
  [75] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [112] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [149] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [186] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [223] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [260] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [297] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [334] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1
 [371] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 2 3 2 2 2 2 2
 [408] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [445] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [482] 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [519] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [556] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [593] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [630] 4 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 4 2 2 2 2 2
 [667] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [704] 2 2 2 2 4 2 2 4 2 2 2 2 2 2 2 3 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [741] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2
 [778] 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 2 5 5 5 5 5 5 5 5 5 5 5 5 5 5
 [815] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
 [852] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
 [889] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
 [926] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
 [963] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
[1000] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
[1037] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
[1074] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
[1111] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
[1148] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5
[1185] 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 5 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1222] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1259] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1296] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1333] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1370] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1407] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1444] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1481] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1518] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1555] 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3 3
[1592] 3 3 3 3 3 3 3 3 3 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1629] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1666] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1703] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1740] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1777] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1814] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1851] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1888] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1925] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1962] 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4 4
[1999] 4 4

Silhouette plot information for best sample:
     cluster neighbor sil_width
255        1        5 0.8437647
171        1        5 0.8394921
291        1        5 0.7950084
282        1        5 0.7610594
87         1        5 0.7520517
744        2        3 0.7750689
753        2        3 0.7732461
550        2        3 0.7714897
606        2        3 0.7681556
453        2        3 0.7560121
728        2        3 0.7512566
576        2        1 0.7499464
513        2        1 0.7331192
560        2        1 0.7291131
507        2        3 0.7027174
664        2        3 0.6941632
704        2        1 0.6447163
617        2        1 0.4172408
589        2        3 0.3493197
561        2        3 0.2618876
1475       3        5 0.8414336
1517       3        5 0.8384105
1371       3        5 0.8352902
1443       3        5 0.8336913
1247       3        5 0.8261265
1207       3        5 0.8203274
1348       3        5 0.8174613
1474       3        5 0.7746370
1334       3        5 0.7730061
1285       3        5 0.6199933
1770       4        3 0.8842829
1768       4        3 0.8745956
1913       4        3 0.8654229
1795       4        3 0.8486021
1651       4        3 0.8404848
1762       4        3 0.8281131
1656       4        3 0.8091652
924        5        3 0.7497243
1060       5        3 0.7478978
1120       5        3 0.7450913
992        5        3 0.7287832
1051       5        3 0.7150749
827        5        3 0.7041583
808        5        3 0.6892041
1022       5        3 0.6689111
1040       5        3 0.6474570
962        5        1 0.6266191
940        5        1 0.4965060
954        5        3 0.4877846
1005       5        3 0.2244547

1225 dissimilarities, summarized :
    Min.  1st Qu.   Median     Mean  3rd Qu.     Max. 
 0.91254 22.56800 36.06000 34.34600 47.49500 83.63800 
Metric :  euclidean 
Number of objects : 50

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> ## 3 "half" samples:
> clara(x5, 5, samples = 999)
Call:	 clara(x = x5, k = 5, samples = 999) 
Medoids:
           [,1]       [,2]        [,3]
[1,]  0.4753746 -0.1765723  0.38026681
[2,] 10.5292754 39.9278909  0.07664958
[3,] 40.4696100 19.9154135 -0.11342069
[4,] 49.6841771 50.8667494  0.43448856
[5,] 30.1926628  0.2226872  0.20417028
Objective function:	 5.677885
Clustering vector: 	 int [1:2000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
Cluster sizes:	    	 400 393 404 403 400 
Best sample:
 [1]    2   45   63  105  173  305  346  354  384  449  482  503  523  528  540
[16]  612  646  649  670  688  731  809  881  916  959 1002 1031 1114 1186 1210
[31] 1223 1233 1275 1276 1290 1365 1395 1400 1447 1454 1593 1598 1695 1704 1727
[46] 1750 1769 1770 1865 1964

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> clara(x5, 5, samples = 1000)
Call:	 clara(x = x5, k = 5, samples = 1000) 
Medoids:
           [,1]       [,2]        [,3]
[1,]  0.4753746 -0.1765723  0.38026681
[2,] 10.5292754 39.9278909  0.07664958
[3,] 40.4696100 19.9154135 -0.11342069
[4,] 49.6841771 50.8667494  0.43448856
[5,] 30.1926628  0.2226872  0.20417028
Objective function:	 5.677885
Clustering vector: 	 int [1:2000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
Cluster sizes:	    	 400 393 404 403 400 
Best sample:
 [1]    2   45   63  105  173  305  346  354  384  449  482  503  523  528  540
[16]  612  646  649  670  688  731  809  881  916  959 1002 1031 1114 1186 1210
[31] 1223 1233 1275 1276 1290 1365 1395 1400 1447 1454 1593 1598 1695 1704 1727
[46] 1750 1769 1770 1865 1964

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> clara(x5, 5, samples = 1001)
Call:	 clara(x = x5, k = 5, samples = 1001) 
Medoids:
           [,1]       [,2]        [,3]
[1,]  0.4753746 -0.1765723  0.38026681
[2,] 10.5292754 39.9278909  0.07664958
[3,] 40.4696100 19.9154135 -0.11342069
[4,] 49.6841771 50.8667494  0.43448856
[5,] 30.1926628  0.2226872  0.20417028
Objective function:	 5.677885
Clustering vector: 	 int [1:2000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
Cluster sizes:	    	 400 393 404 403 400 
Best sample:
 [1]    2   45   63  105  173  305  346  354  384  449  482  503  523  528  540
[16]  612  646  649  670  688  731  809  881  916  959 1002 1031 1114 1186 1210
[31] 1223 1233 1275 1276 1290 1365 1395 1400 1447 1454 1593 1598 1695 1704 1727
[46] 1750 1769 1770 1865 1964

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> 
> clara(x5, 5, samples = 2000)#full sample
Call:	 clara(x = x5, k = 5, samples = 2000) 
Medoids:
           [,1]       [,2]       [,3]
[1,]  0.4753746 -0.1765723  0.3802668
[2,]  9.9849318 39.8137651 -0.3637146
[3,] 40.4696100 19.9154135 -0.1134207
[4,] 49.5521365 50.9160832  0.3138241
[5,] 30.1926628  0.2226872  0.2041703
Objective function:	 5.675923
Clustering vector: 	 int [1:2000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
Cluster sizes:	    	 400 393 404 403 400 
Best sample:
 [1]    4   15   23  135  157  173  188  246  282  318  364  366  377  529  544
[16]  638  649  676  756  771  772  777  812  847  851  855  859  940  948  991
[31] 1042 1114 1149 1201 1316 1400 1442 1477 1480 1487 1603 1669 1670 1712 1745
[46] 1750 1756 1900 1923 1964

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> 
> ###--- Start a version of  example(clara) -------
> 
> ## xclara : artificial data with 3 clusters of 1000 bivariate objects each.
> data(xclara)
> (clx3 <- clara(xclara, 3))
Call:	 clara(x = xclara, k = 3) 
Medoids:
            V1        V2
[1,]  5.553391 13.306260
[2,] 43.198760 60.360720
[3,] 74.591890 -6.969018
Objective function:	 13.22500
Clustering vector: 	 int [1:3000] 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 1 ...
Cluster sizes:	    	 900 1148 952 
Best sample:
 [1]   20   30   46   91   92  169  179  187  209  223  382  450  555  971 1004
[16] 1025 1058 1277 1281 1302 1319 1361 1362 1513 1591 1623 1628 1729 1752 1791
[31] 1907 1917 1946 2064 2089 2498 2527 2537 2545 2591 2672 2722 2729 2790 2797
[46] 2852

Available components:
 [1] "sample"     "medoids"    "i.med"      "clustering" "objective" 
 [6] "clusinfo"   "diss"       "call"       "silinfo"    "data"      
> ## Plot similar to Figure 5 in Struyf et al (1996)
> plot(clx3)
> 
> ## The  rngR = TRUE case is currently in the non-strict tests
> ## ./clara-ex.R
> ## ~~~~~~~~~~~~
> 
> ###--- End version of example(clara) -------
> 
> ## Last Line:
> cat('Time elapsed: ', proc.time() - .proctime00,'\n')
Time elapsed:  3.44 0.022 3.487 0 0 
> 
